services:
  api:
    container_name: api-dev
    build:
      context: .
      target: dev
      args:
        # 可在 .env.dev 配置；无配置则用默认值
        ALPINE_MIRROR: ${ALPINE_MIRROR:-https://dl-cdn.alpinelinux.org}
        GOPROXY: ${GOPROXY:-https://proxy.golang.org,direct}
        USE_CGO: ${USE_CGO:-0}
    env_file:
      - .env.dev
    environment:
      # 容器内监听端口（建议与 API_PORT 相同）
      SSP_SERVER_PORT: ${SSP_SERVER_PORT:-8080}
    working_dir: /app
    command: ["air", "-c", ".air.toml"]
    volumes:
      # 代码热重载
      - ./:/app
      # 持久化 Go 构建/模块缓存，加速二次编译
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
    ports:
      # 主机:容器 端口映射；两个变量通常一致
      - "${API_PORT:-8080}:${SSP_SERVER_PORT:-8080}"
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O - http://127.0.0.1:${SSP_SERVER_PORT:-8080}/api/v1/healthz >/dev/null"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    # 如需数据库，取消下一行注释并启用 db 服务
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:16-alpine
    container_name: postgres-dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-student_service}
    volumes:
      - pgdata-dev:/var/lib/postgresql/data
    ports:
      - "${PG_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-student_service}"]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped

volumes:
  go-mod-cache:
  go-build-cache:
  pgdata-dev: