services:
  api:
    container_name: api-staging
    build:
      context: .
      target: release
      args:
        ALPINE_MIRROR: ${ALPINE_MIRROR:-https://dl-cdn.alpinelinux.org}
        GOPROXY: ${GOPROXY:-https://proxy.golang.org,direct}
        USE_CGO: ${USE_CGO:-0}
    image: ${APP_IMAGE:-student-service-backend}:staging
    env_file:
      - .env.staging
    ports:
      - "${API_PORT:-8080}:${SSP_SERVER_PORT:-8080}"
    # 运行期健康检查已在 Dockerfile 中定义；如需覆盖，可取消注释下方自定义
    # healthcheck:
    #   test: ["CMD-SHELL", "sh -c 'URL=http://127.0.0.1:${SSP_SERVER_PORT:-8080}/api/v1/healthz; (command -v curl >/dev/null && curl -fsS $URL) || wget -q -O - $URL'"]
    #   interval: 15s
    #   timeout: 3s
    #   retries: 3
    #   start_period: 10s
    restart: always
    depends_on:
      db:
        condition: service_healthy
    # 资源限制（可按需调整；非 Swarm 下部分字段可能被忽略）
    ulimits:
      nofile:
        soft: 4096
        hard: 8192
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: postgres:16-alpine
    container_name: postgres-staging
    env_file:
      - .env.staging
    volumes:
      - pgdata-staging:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ssp}"]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: always

volumes:
  pgdata-staging: